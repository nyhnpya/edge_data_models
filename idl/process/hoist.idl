#include "base_data_types.idl"

module nec
{
    module process
    {
        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: EdgeBaseProfile

        //@copy-c-declaration static const char HOIST_REQUEST[] = "HoistRequest";

        /**
         * \ingroup Request
         *
         * \brief requested state change in the hoisting system.
         *
         * | Variable          | Description                                      | Data Type           |
         * | ----------------- | -------------------------------------------------| --------------------|
         * | id                | id of requestor                                  | DataTypes::Uuid     |
         * | objectiveId       | id of current objective                          | DataTypes::Uuid     |
         * | priority          | priority of the request                          | DataTypes::Priority |
         * | timeNeeded        | time requester needs the resource                | DataTypes::Time     |
         * | estimatedDuration | estimated duration requestor needs the resource  | DataTypes::Time     |
         * | targetVelocity    | requested target velocity                        | units::velocity::meters_per_second |
         * | targetPosition    | requested target position                        | units::length::meter |
         */
        struct HoistRequest
        {
            DataTypes::Uuid     id;           //@key
            DataTypes::Uuid     objectiveId; 
            DataTypes::Priority priority;
            DataTypes::Time     timeNeeded;
            DataTypes::Time     estimatedDuration;
            double              targetVelocity;
            double              targetPosition;
        };

        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: EdgeBaseProfile

        //@copy-c-declaration static const char HOIST_OBJECTIVE[] = "HoistObjective";

        /**
         * \brief current requested state change in the hoisting system.
         *
         * \ingroup Objective
         *
         * | Variable          | Description                                      | Data Type       |
         * | ----------------- | ------------------------------------------------ | ----------------|
         * | id                | id of requestor                                  | DataTypes::Uuid |
         * | objectiveId       | id of current objective                          | DataTypes::Uuid |
         * | estimatedDuration | estimated duration requestor needs the resource  | DataTypes::Time |
         * | targetVelocity    | requested target velocity                        | units::velocity::meters_per_second |
         * | targetPosition    | requested target position                        | units::length::meter |
         */
        struct HoistObjective
        {
            DataTypes::Uuid  id; //@key
            DataTypes::Uuid  objectiveId; 
            DataTypes::Time  estimatedDuration;
            double           targetVelocity;
            double           targetPosition;
        };

        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: EdgeBaseProfile

        //@copy-c-declaration static const char HOIST_STATE[] = "HoistState";

        /**
         * \ingroup Actual
         *
         * \brief current state of the hoisting system.
         *
         * The hoist state interface is a persistent interface which is guaranteed to be available by the system at all times regardless of the current system objective.  
         * The state of the interface will be published only when any of the interface contents change.  
         * This interface is available for consumption by any actor of the system interested in observing the current process state of the hoisting system.  
         * The interface is guaranteed to publish only at a frequency equal to or less than that of the underlying control system.
         * 
         * *NOTE* : Please note the following semantics<br>
         *  **velocity** is always in reference to block speed
         *  <br>**position** is always in reference to elevator (*internal calculation of the control system may use both the elevator and the block to calculate position*).
         * 
         * ### Hoist State QoS
         * The following QoS events are available for any observer of the Hoist State Topic.  
         * 
         * | Policy                 | Definition                |
         * | :-------------------  | :--------------------------|
         * | Reliability           | Reliable                   |
         * | Durability            | Transient Local Durability |
         * | History               | Last sample                |
         * | OnDataAvailable       | |
         * | OnLivelinessLost      | | 
         * | OnDataDisposed        | | 
         * 
         *
         * | Variable          | Description                            | Data Type         |
         * | ----------------- | -------------------------------------- | ----------------- |
         * | id                | id of requestor                        | DataTypes::Uuid   |
         * | objectiveId       | id of current objective                | DataTypes::Uuid   |
         * | timestamp         | timestamp when the data was published. | DataTypes::Time   |
         * | status            | status of ciruclation system           | Datatypes::Status |
         * | actualHookload    | actual hookload                        | units::force::newton            |
         * | actualVelocity    | actual velicoty in m/s                 | units::velocity::meters_per_second            |
         * | actualPosition    | actual position in m                  | units::length::meter            |
         * | maxHookload       | machine maximum hookload                       | units::force::newton            |
         * | maxHoistVelocity  | machine maximum hoisting velocity in m/s                | units::velocity::meters_per_second            |
         * | maxLowerVelocity  | machine maximum lowering velocity in m/s                | units::velocity::meters_per_second            |
         * | maxHoistPosition  | machine maximum hoisting position in m                | units::length::meter            |
         * | maxLowerPosition  | machine maximum lowering position in m/s                | units::length::meter            |
         * | targetVelocity    | requested target velocity              | units::velocity::meters_per_second |
         * | targetPosition    | requested target position              | units::length::meter |
         */
        struct HoistState
        {
            DataTypes::Uuid     id;   //@key
            DataTypes::Uuid     objectiveId; 
            DataTypes::Time     timestamp;
            DataTypes::Status   status;

            double              actualHookload;
            double              actualVelocity;
            double              actualPosition;
            double              maxHookload;
            double              maxHoistVelocity;
            double              maxLowerVelocity;
            double              maxHoistPosition;
            double              maxLowerPosition;
            double              targetVelocity;
            double              targetPosition;
        };
    };
};
