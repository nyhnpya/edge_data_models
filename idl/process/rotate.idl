#include "base_data_types.idl"

module nec
{
    module process
    {
        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: RotateRequestProfile

        //@copy-c-declaration static const char ROTATE_REQUEST[] = "RotateRequest";
        /**
         * \ingroup Request
         *
         * \brief Requested state change in the rotation system.
         *
         * ### Rotate Request
         * The rotate request interface is an ephemeral interface which issued by a requestor to modify the current state of the system.  
         * The state of the interface will be published only when the publishing algorithm requests.    
         * 
         * ### Rotate Request QoS
         * The following QoS events are available for any observer of the Rotate Request Topic.  
         * 
         * | Policy                 | Definition                |
         * | :-------------------  | :--------------------------|
         * | Reliability           | Reliable                   |
         * | Durability            | Transient Local Durability |
         * | History               | Last sample                |
         * | OnDataAvailable       | |
         * | OnLivelinessLost      | | 
         * | OnDataDisposed        | | 
         *
         * | Variable          | Description                                         | Data Type           | 
         * | ----------------- | --------------------------------------------------- | ------------------- | 
         * | id                | id of requestor                                     | DataTypes::Uuid     | 
         * | objectiveId       | id of current objective                             | DataTypes::Uuid     | 
         * | priority          | priority of the request                             | DataTypes::Priority | 
         * | timeNeeded        | time requester needs the resource                   | DataTypes::Time     | 
         * | estimatedDuration | estimated duration requestor needs the resource     | DataTypes::Time     | 
         * | targetRate        | requested traget in rad/s                           | units::angular_velocity::radians_per_second  |
         */
        struct RotateRequest
        {
            DataTypes::Uuid     id;          //@key
            DataTypes::Uuid     objectiveId; 
            DataTypes::Priority priority;
            DataTypes::Time     timeNeeded;
            DataTypes::Time     estimatedDuration;
            double              targetRate;  
        };

        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: RotateObjectiveProfile

        //@copy-c-declaration static const char ROTATE_OBJECTIVE[] = "RotateObjective";
        /**
         * \ingroup Objective
         *
         * \brief Current requested state change in the rotation system.
         *
         * | Variable          | Description                                        | Data Type        |
         * | ----------------- | -------------------------------------------------- | ---------------- |
         * | id                | id of requestor                                    | DataTypes::Uuid  |
         * | objectiveId       | id of current objective                            | DataTypes::Uuid  |
         * | estimatedDuration | estimated duration requestor needs the resource    | DataTypes::Time  |
         * | targetRate        | requested traget in rad/s                          | units::angular_velocity::radians_per_second |
         */
        struct RotateObjective
        {
            DataTypes::Uuid  id;                //@key
            DataTypes::Uuid  objectiveId; 
            DataTypes::Time  estimatedDuration; 
            double           targetRate;        
        };

        // QoSLibrary: EdgeBaseLibrary
        // QoSProfile: RotateStateProfile

        //@copy-c-declaration static const char ROTATE_STATE[] = "RotateState";
        /**
         * \ingroup Actual
         *
         * \brief Current state of rotation system.
         *
         * ### Rotate State
         * The rotation state interface is a persistent interface which is guaranteed to be available by the system at all times regardless of the current system objective.  
         * The state of the interface will be published only when any of the interface contents change.  
         * This interface is available for consumption by any actor of the system interested in observing the current process state of the rotation system. 
         * The interface is guaranteed to publish only at a frequency equal to or less than that of the underlying control system.
         * 
         * ### Rotate State QoS
         * The following QoS policies are available for any observer of the Rotate State Topic.  
         * 
         * | Policy                 | Definition                |
         * | :-------------------  | :--------------------------|
         * | Reliability           | Reliable                   |
         * | Durability            | Transient Local Durability |
         * | History               | Last sample                |
         * | OnDataAvailable       | |
         * | OnLivelinessLost      | | 
         * | OnDataDisposed        | | 
         *
         * | Variable      | Description                            | Data Type         | 
         * | ------------- | ---------------------------------------| ------------------| 
         * | id            | id of requestor                        | DataTypes::Uuid   | 
         * | objectiveId   | id of current objective                | DataTypes::Uuid   | 
         * | timestamp     | timestamp when the data was published  | DataTypes::Time   | 
         * | status        | Unique id of publisher                 | Datatypes::Status | 
         * | actualRate    | actual rate in rad/s                   | units::angular_velocity::radians_per_second |
         * | minRate       | minimum machine rate in rad/s          | units::angular_velocity::radians_per_second |
         * | maxRate       | maximum machine rate in rad/s          | units::angular_velocity::radians_per_second |
         * | targetRate    | requested traget in rad/s              | units::angular_velocity::radians_per_second |
         */
        struct RotateState
        {
            DataTypes::Uuid   id;           //@key
            DataTypes::Uuid   objectiveId; 
            DataTypes::Time   timestamp;        
            DataTypes::Status status;
            double            actualRate;  
            double            minRate;  
            double            maxRate;  
            double            targetRate;  
        };
    };
};
