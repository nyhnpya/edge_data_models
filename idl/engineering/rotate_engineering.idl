#include "base_data_types.idl"

module nec
{
    module engineering
    {
        enum State
        {
            Available,
            Unavailable,
            NotSafe
        };

        enum Mode
        {
            Locka,
            Remote,
            QuillOscillation
        };

        //@copy-c-declaration static const char ROTATE_ENGINEERING_REQUEST[] = "RotateEngineeringRequest";

        /**
         * \brief requested state change in the rotation system.
         *
         * \ingroup NonSafeRotationFunctions
         *
         * | Variable          | Description                                         | Data Type           | Unit    |
         * | ----------------- | --------------------------------------------------- | ------------------- | ------- |
         * | id                | id of requestor                                     | DataTypes::Uuid     | N/A     |
         * | objectiveId       | id of current objective                             | DataTypes::Uuid     | N/A     |
         * | priority          | priority of the request                             | DataTypes::Priority | sec     |
         * | timeNeeded        | time requester needs the resource                   | DataTypes::Time     | sec     |
         * | estimatedDuration | estimated duration requestor needs the resource     | DataTypes::Time     | N/A     |
         * | targetRate        | requested traget in rad/s                           | double              | rad/s   |
         */
        struct RotateRequest
        {
            DataTypes::Uuid     id;          //@key
            DataTypes::Priority priority;    // priority of the request
            DataTypes::Time     timeNeeded;  // time requester needs the resource
            DataTypes::Time     duration;    // duration requester needs the resource
            double              targetRate;  // requested traget in rad/s
        };

        //@copy-c-declaration static const char ROTATE_ENGINEERING_OBJECTIVE[] = "RotateEngineeringObjective";

        /**
         * \brief current requested state change in the rotation system.
         *
         * \ingroup NonSafeRotationFunctions
         *
         * | Variable          | Description                                        | Data Type        | Unit  |
         * | ----------------- | -------------------------------------------------- | ---------------- | ----- |
         * | id                | id of requestor                                    | DataTypes::Uuid  | N/A   |
         * | objectiveId       | id of current objective                            | DataTypes::Uuid  | N/A   |
         * | estimatedDuration | estimated duration requestor needs the resource    | DataTypes::Time  | N/A   |
         * | targetRate        | requested traget in rad/s                          | double           | rad/s |
         */
        struct RotateObjective
        {
            DataTypes::Uuid     id;                //@key
            DataTypes::Time     estimatedDuration; // estimated time current requestor owns the resource
            double              targetRate;  // requested traget in rad/s
            double              targetTorque;  // requested traget in rad/s
        };

        //@copy-c-declaration static const char ROTATE_ENGINEERING_STATE[] = "RotateEngineeringState";

        /**
         * \brief current state of rotation system.
         *
         * \ingroup NonSafeRotationFunctions
         *
         * | Variable      | Description                            | Data Type         | Unit  |
         * | ------------- | ---------------------------------------| ------------------| ------|
         * | id            | id of requestor                        | DataTypes::Uuid   | N/A   |
         * | objectiveId   | id of current objective                | DataTypes::Uuid   | N/A   |
         * | timestamp     | timestamp when the data was published  | DataTypes::Time   | sec   |
         * | status        | Unique id of publisher                 | Datatypes::Status | N/A   |
         * | actualRate    | actual rate in rad/s                   | double            | rad/s |
         * | minRate       | minimum machine rate in rad/s          | double            | rad/s |
         * | maxRate       | maximum machine rate in rad/s          | double            | rad/s |
         * | targetRate    | requested traget in rad/s              | double            | rad/s |
         */
        struct RotateState
        {
            DataTypes::Uuid     id;           //@key
            DataTypes::Status   status;
            DataTypes::Time     timestamp;        

            // acutals
            State    state;
            Mode     mode;
            double   actualVelocity;
            double   actualTorque;
            double   actualPosition;
            double   actualPower;

            // constraints
            double   minVelocity;
            double   maxVelocity;
            double   minTorque;
            double   maxTorque;
            double   minPosition;
            double   maxPosition;

            // targets
            double   torqueVelocity;
            double   torqueTorque;
            double   torquePosition;
        };
    };
};
